'use strict'

const Telegram = require('telegram-node-bot')
const TelegramBaseController = Telegram.TelegramBaseController
const TextCommand = Telegram.TextCommand
const MongooseStorage = require('./MongooseStorage.js')
const fs = require('fs')
const fast = require('fast.js')

const tg = new Telegram.Telegram(require('./token').token, {
        webAdmin: {
            port: 3010,
            host: 'localhost'
        },
        storage: new MongooseStorage()
    })

tg.onMaster(() => {
  const mongoose = require('mongoose')
  mongoose.connect('mongodb://localhost/kbpbot', {})
})

class ScheludeController extends TelegramBaseController {

    static capsFirst(str) {
        return str.charAt(0).toUpperCase() + str.slice(1)
    }

    static toStringNumber(num) {
        return (num <= 9) ? '0' + num.toString() : num.toString()
    }

    constructor(config) {
        super()

        config = config || {}

        var loadSchelude = () => {
            return new Promise((resolve, reject) => {
                fs.readFile('./timetable.json', 'utf8', (err, data) => {
                    if (err) return reject(err)
                    return resolve(data)
                })
            })
            .then((data) => {
                this.schelude = JSON.parse(data)
                console.log('Timetable reloaded in ' + process.pid)
            })
            .catch((err) => {
                console.log('ERROR in timetable reload:', err.message)
                return
            })
        }

        loadSchelude()

        setInterval(() => {
            loadSchelude()
        }, 14 * 60 * 60 * 1000)

        this.days = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë']
        this.decDays = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É']

        this.info = '–¢—É—Ç –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'

        fs.readFile(config.infoPath || 'BOT_INFO.MD', 'utf8', (err, data) => {
          if (err) console.log('information not loaded, fs.readFile fail')
          this.info = data
        })
    }

    handle($) {
        new Promise((resolve, reject) => {
            if ($.idFromGroupChat)
                return resolve($.getChatSession('pinnedItem'))
            else
                return resolve($.getUserSession('pinnedItem'))
        })
        .then((pinnedItem) => {
            let menuButtons = {}
            let layout = [2, 2, 3]

            if (pinnedItem 
                && this.schelude[pinnedItem.category]
                && this.schelude[pinnedItem.category][pinnedItem.item]) {
                layout = [1, 2, 2, 3]
                let tempText = 'üìç ' +
                                ScheludeController.capsFirst(pinnedItem.category) +
                                ' - ' +
                                ScheludeController.capsFirst(pinnedItem.item)
                menuButtons[tempText] = (choose$) => {
                    this.chooseDayInItem(choose$, pinnedItem.category, pinnedItem.item)
                }
            }
            menuButtons['üë™ –ì—Ä—É–ø–ø—ã'] = (choose$) => {
                this.chooseItemInCategory(choose$, '–≥—Ä—É–ø–ø–∞')
            }
            menuButtons['üë¥ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'] = (choose$) => {
                this.chooseItemInCategory(choose$, '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
            }
            menuButtons['üìö –ü—Ä–µ–¥–º–µ—Ç—ã'] = (choose$) => {
                this.chooseItemInCategory(choose$, '–ø—Ä–µ–¥–º–µ—Ç')
            }
            menuButtons['üö™ –ê—É–¥–∏—Ç–æ—Ä–∏–∏'] = (choose$) => {
                this.chooseItemInCategory(choose$, '–∞—É–¥–∏—Ç–æ—Ä–∏—è')
            }
            menuButtons['üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏'] = (choose$) => {
                this.chooseSetting(choose$)
            }
            menuButtons['‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] = (choose$) => {
                this.showInformation(choose$)
            }
            $.runMenu(fast.assign({
                message: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                resizeKeyboard: true,
                layout: layout,
                'anyMatch': (choose$) => {
                    choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
                    .then(() => {
                        this.handle(choose$)
                    })
                    .catch(console.log)
                    console.log('err', choose$)
                }
            }, menuButtons))
            .catch(console.log)
        })
    }

    chooseItemInCategory($, category) {
        let menuButtons = {}

        menuButtons['‚¨ÖÔ∏è –ú–µ–Ω—é'] = (choose$) => {
            choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
            .then(() => this.handle(choose$))
            .catch(console.log)
        }

        fast.forEach(Object.keys(this.schelude[category]), (item, ind) => {
            menuButtons[ScheludeController.capsFirst(item)] = (choose$) => {
                this.chooseDayInItem(choose$, category, item)
            }
        })

        $.runMenu(fast.assign({
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–¥–ª—è –≤–≤–æ–¥–∞ —Å–∞–º–æ–º—É –Ω—É–∂–Ω–∞ –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)',
            resizeKeyboard: true,
            layout: 3,
            'anyMatch': (choose$) => {
                choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
                .then(() => this.handle(choose$))
                .catch(console.log)
            }
        }, menuButtons))
        .catch(console.log)
    }

    chooseDayInItem($, category, item) {
        let menuButtons = {}

        menuButtons['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'] = (choose$) => {
            this.chooseItemInCategory(choose$, category)
        }

        menuButtons['‚¨ÖÔ∏è –ú–µ–Ω—é'] = (choose$) => {
            this.handle(choose$)
        }

        let currentDay = (new Date()).getDay()

        fast.forEach(Object.keys(this.schelude[category][item]), (day, ind) => {
            day = parseInt(day)
            let caption = (currentDay === day) ? '>' + this.days[day] + '<' : this.days[day]
            menuButtons[caption] = (choose$) => {
                this.showDay(choose$, category, item, day.toString())
            }
        })

        $.runMenu(fast.assign({
            message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
            resizeKeyboard: true,
            layout: [2, 3, 3],
            'anyMatch': (choose$) => {
                choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∑–∞–¥.')
                .then(() => this.chooseItemInCategory(choose$, category))
                .catch(console.log)
            }
        }, menuButtons))
        .catch(console.log)
    }

    showDay($, category, item, day) {

        let lessons = ''

        fast.forEach(Object.keys(this.schelude[category][item][day]), (lessonNo, ind) => {
            let lesson = this.schelude[category][item][day][lessonNo]
            lesson.subject = lesson.subject.trim()
            lesson.group = lesson.group.trim()
            lesson.classroom = lesson.classroom.trim()
            lessons = lessons 
                + '\n\n' 
                + '–ü–∞—Ä–∞ ‚Ññ' + lessonNo + (lesson.replacement ? ' (–∑–∞–º–µ–Ω–∞)' : '' )
                + ((lesson.subject && (category !== '–ø—Ä–µ–¥–º–µ—Ç')) ? '\n- ' + lesson.subject  : '')
                + ((lesson.group && (category !== '–≥—Ä—É–ø–ø–∞')) ? '\n- ' + lesson.group : '')
                + ((lesson.teachers && lesson.teachers.length && (category !== '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')) ? '\n- ' + lesson.teachers.join(', ') : '')
                + (lesson.classroom ? '\n- –ê—É–¥–∏—Ç–æ—Ä–∏—è ' + lesson.classroom : '')
        })

        let outDay = ((new Date()).getDay() === parseInt(day)) ? '—Å–µ–≥–æ–¥–Ω—è (' + this.days[day] + ')' : this.decDays[day]
        lessons = lessons || '–ü–∞—Ä –Ω–∞ ' + outDay + ' –Ω–µ—Ç'

        $.sendMessage(item + ', –ø–∞—Ä—ã –Ω–∞ ' + outDay + ': ' + lessons)
        .then(() => this.chooseDayInItem($, category, item))
        .catch(console.log)
    }

    pinItem($, category) {
        let menuButtons = {
            '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': (choose$) => {
                choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
                .then(() => this.chooseSetting(choose$))
                .catch(console.log)
            },
            '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
                choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
                .then(() => this.handle(choose$))
                .catch(console.log)
            }
        }

        fast.forEach(Object.keys(this.schelude[category]), (item, ind) => {
            menuButtons[ScheludeController.capsFirst(item)] = (choose$) => {

            if ($.idFromGroupChat)
                choose$.setChatSession('pinnedItem', {
                    category: category,
                    item: item
                })
                .then(() => {
                    choose$.sendMessage('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')
                    .then(() => this.chooseSetting(choose$))
                    .catch(console.log)
                })
            else
                choose$.setUserSession('pinnedItem', {
                    category: category,
                    item: item
                })
                .then(() => {
                    choose$.sendMessage('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')
                    .then(() => this.chooseSetting(choose$))
                    .catch(console.log)
                })
            }
        })

        $.runMenu(fast.assign({
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å',
            resizeKeyboard: true,
            layout: 3,
            'anyMatch': (choose$) => {
                choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
                .then(() => this.handle(choose$))
                .catch(console.log)
            }
        }, menuButtons))
        .catch(console.log)
    }

    unpinItem($) {
        if ($.idFromGroupChat)
            $.setChatSession('pinnedItem', null)
            .then(() => {
                $.sendMessage('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞!')
                .then(() => this.chooseSetting($))
                .catch(console.log)
            })
        else
            $.setUserSession('pinnedItem', null)
            .then(() => {
                $.sendMessage('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ!')
                .then(() => this.chooseSetting($))
                .catch(console.log)
            })
    }

    chooseSetting($) {

        Promise.all([
            new Promise((resolve, reject) => {
                if ($.idFromGroupChat)
                    resolve($.getChatSession('pinnedItem'))
                else
                    resolve($.getUserSession('pinnedItem'))
            }),
            new Promise((resolve, reject) => {
                if ($.idFromGroupChat)
                    resolve($.getChatSession('sendingTime'))
                else
                    resolve($.getUserSession('sendingTime'))
            })
        ])
        .then(settings => {

            let pinnedItem = settings[0]
            let sendingTime = settings[1]
            let tempText = ''

            let menuButtons = {
                '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
                    this.handle(choose$)
                }
            }

            let pinItemMenu = {
                message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å',
                resizeKeyboard: true,
                layout: [2, 2, 2, 1],

                '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': (choose$) => {
                    this.chooseSetting(choose$)
                },
                '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
                    this.handle(choose$)
                },
                'üë™ –ì—Ä—É–ø–ø–∞': (choose$) => {
                    this.pinItem(choose$, '–≥—Ä—É–ø–ø–∞')
                },
                'üë¥ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': (choose$) => {
                    this.pinItem(choose$, '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
                },
                'üìö –ü—Ä–µ–¥–º–µ—Ç': (choose$) => {
                    this.pinItem(choose$, '–ø—Ä–µ–¥–º–µ—Ç')
                },
                'üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è': (choose$) => {
                    this.pinItem(choose$, '–∞—É–¥–∏—Ç–æ—Ä–∏—è')
                },
                'üëª –ù–∏—á–µ–≥–æ': (choose$) => {
                    this.unpinItem(choose$)
                }
            }

            if (pinnedItem 
                && this.schelude[pinnedItem.category]
                && this.schelude[pinnedItem.category][pinnedItem.item]) {

                tempText = 'üìç –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: ' +
                            ScheludeController.capsFirst(pinnedItem.category) +
                            ' - ' +
                            ScheludeController.capsFirst(pinnedItem.item)

                menuButtons[tempText] = pinItemMenu
            } else {
                menuButtons['üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç'] = pinItemMenu
            }

            if (sendingTime) {
                tempText = 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ' + 
                            ScheludeController.toStringNumber(sendingTime.hour) + 
                            ':' + 
                            ScheludeController.toStringNumber(sendingTime.minute) + 
                            '. –û—Ç–∫–ª—é—á–∏—Ç—å?'
                menuButtons[tempText] = (choose$) => {
                    this.disableNotifications(choose$)
                }
            }
            else {
                tempText = 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç—å?'
                menuButtons[tempText] = (choose$) => {
                    this.enableNotifications(choose$)
                }
            }
    
            $.runMenu(fast.assign({
                message: '–¢—É—Ç –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø',
                resizeKeyboard: true,
                layout: [1, 1],
                'anyMatch': (choose$) => {
                    choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
                    .then(() => this.handle(choose$))
                    .catch(console.log)
                }
            }, menuButtons))
            .catch(console.log)
        }, console.log)

    }

    disableNotifications($) {

        if ($.idFromGroupChat)
            $.setChatSession('sendingTime', null)
            .then(() => {
                $.sendMessage('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã!')
                .then(() => this.chooseSetting($))
                .catch(console.log)
            }, console.log)
        else
            $.setUserSession('sendingTime', null)
            .then(() => {
                $.sendMessage('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!')
                .then(() => this.chooseSetting($))
                .catch(console.log)
            }, console.log)

    }

    enableNotifications($) {

        let _enableNotifications = ($) => {
            let time = $.message.text
            if(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/i.test(time)) {
                time = time.split(':')
                time = {
                    hour: parseInt(time[0]),
                    minute: parseInt(time[1])
                }
                if ($.idFromGroupChat)
                    $.setChatSession('sendingTime', time)
                    .then(() => {
                        $.sendMessage('–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
                        .then(() => this.chooseSetting($))
                        .catch(console.log)
                    }, console.log)
                else
                    $.setUserSession('sendingTime', time)
                    .then(() => {
                        $.sendMessage('–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
                        .then(() => this.chooseSetting($))
                        .catch(console.log)
                    }, console.log)
            } else {
                $.sendMessage('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤—Ä–µ–º—è. –û—Ç–º–µ–Ω–∞.')
                .then(() => this.chooseSetting($))
                .catch(console.log)
            }
        }

        let menuButtons = {
            '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': (choose$) => {
                choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
                .then(() => this.chooseSetting(choose$))
                .catch(console.log)
            },
            '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
                choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
                .then(() => this.handle(choose$))
                .catch(console.log)
            },
            '06:30': _enableNotifications,
            '07:00': _enableNotifications,
            '07:30': _enableNotifications,
            '11:00': _enableNotifications,
            '11:30': _enableNotifications,
            '12:00': _enableNotifications
        }

        $.runMenu(fast.assign({
            message: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (—Ö–æ—Ç—è –æ–Ω–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)',
            resizeKeyboard: true,
            layout: [2, 3, 3],
            'anyMatch': _enableNotifications
        }, menuButtons))
        .catch(console.log)
    }

    showInformation($) {
        $.sendMessage(this.info, {
            parse_mode: 'Markdown'
        })
        .then(() => this.handle($))
        .catch(console.log)
    }

}

class PingController extends TelegramBaseController {

    handle($) {
        $.sendMessage('pong')
        .catch(console.log)
    }

}

class StopController extends TelegramBaseController {

    handle($) {

    }

}

const pingController = new PingController()
const stopController = new StopController()
const scheludeController = new ScheludeController()

tg.router
    .when(new TextCommand('ping'), pingController)
    .when(new TextCommand('stop'), stopController)
    .otherwise(scheludeController)