'use strict'

const cluster = require('cluster')
const fs = require('fs')

const Telegram = require('telegram-node-bot')
const TelegramBaseController = Telegram.TelegramBaseController
const TextCommand = Telegram.TextCommand
const MongooseStorage = require('./MongooseStorage.js')

const mongoose = require('mongoose')
const fast = require('fast.js')
const cron = require('node-cron')
const seneca = require('seneca')()

let mongooseStorage = new MongooseStorage()

const tg = new Telegram.Telegram(require('./token').token, {
    webAdmin: {
      port: 3010,
      host: 'localhost'
    },
    storage: mongooseStorage
  })

if (cluster.isMaster) {
  mongoose.connect('mongodb://localhost/kbpbot')
  let tgApiChain = Promise.resolve(1)
  seneca
  .add('role:tg,cmd:api', function api (msg, respond) {
    tgApiChain = tgApiChain.then(() => {
      tg.api[msg.method].apply(tg.api, msg.args)
      .then(response => {
        console.info('--------\nAPI METHOD ' + msg.method + ' CALLED WITH ARGS ' + JSON.stringify(msg.args) + ':\n' + JSON.stringify(response.chat) + '\n--------')
        return respond(null, {
          response: response
        })
      })
    })
    .then(() => new Promise(resolve => {
      setTimeout(resolve, 2000)
    }))
    .catch(respond)
  })
  .use('ScheduleServices')
  .use('SenderServices', {
    model: mongooseStorage.model
  })
  .listen({
    port: 10102
  })
} else if (cluster.isWorker) {
  seneca
  .client({
    port: 10102
  })
}

// TODO add middlewares
// TODO refactor
// –∞ —Ö–æ—Ç—è –Ω–µ, –Ω–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä, –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–Ω –∑–±—Å

class ScheduleController extends TelegramBaseController {

  static capsFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  }

  static toStringNumber(num) {
    return (num <= 9) ? '0' + num.toString() : num.toString()
  }

  constructor(config) {
    super()

    config = config || {}

    // var loadSchedule = () => {
    //   return new Promise((resolve, reject) => {
    //     fs.readFile('./timetable.json', 'utf8', (err, data) => {
    //       if (err) return reject(err)
    //       return resolve(data)
    //     })
    //   })
    //   .then((data) => {
    //     this.schedule = JSON.parse(data)
    //     console.log('Timetable reloaded in ' + process.pid)
    //   })
    //   .catch((err) => {
    //     console.log('ERROR in timetable reload:', err.message)
    //     return
    //   })
    // }

    // loadSchedule()

    // cron.schedule('30 11 * * *', loadSchedule)

    this.days = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë']
    this.decDays = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É']

    this.info = '–¢—É—Ç –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'

    fs.readFile(config.infoPath || 'BOT_INFO.MD', 'utf8', (err, data) => {
      if (err) console.log('information not loaded, fs.readFile fail')
      this.info = data
    })
  }

  handle($, calledDirectly) {
    if (($.message.text !== '/start') && !calledDirectly)
      $.sendMessage('–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ —Ç–µ–ø–µ—Ä—å-—Ç–æ —É–∂ —Ç–æ—á–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–Ω–µ—á–Ω–æ, –µ—Å–ª–∏ –±–æ—Ç —Å–Ω–æ–≤–∞ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω).')

    new Promise((resolve, reject) => {
      return resolve($.getUserSession('pinnedItem'))
    })
    .then((pinnedItem) => {
      let menuButtons = {}
      let layout = [2, 2, 3]

      if (pinnedItem/*
        && this.schedule[pinnedItem.category]
        && this.schedule[pinnedItem.category][pinnedItem.item]*/) {
        layout = [1, 2, 2, 3]
        let tempText = 'üìç ' +
                this.constructor.capsFirst(pinnedItem.category) +
                ' - ' +
                this.constructor.capsFirst(pinnedItem.item)
        menuButtons[tempText] = (choose$) => {
          this.chooseDayInItem(choose$, pinnedItem.category, pinnedItem.item)
        }
      }
      menuButtons['üë™ –ì—Ä—É–ø–ø—ã'] = (choose$) => {
        this.chooseItemInCategory(choose$, '–≥—Ä—É–ø–ø–∞')
      }
      menuButtons['üë¥ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'] = (choose$) => {
        this.chooseItemInCategory(choose$, '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
      }
      menuButtons['üìö –ü—Ä–µ–¥–º–µ—Ç—ã'] = (choose$) => {
        this.chooseItemInCategory(choose$, '–ø—Ä–µ–¥–º–µ—Ç')
      }
      menuButtons['üö™ –ê—É–¥–∏—Ç–æ—Ä–∏–∏'] = (choose$) => {
        this.chooseItemInCategory(choose$, '–∞—É–¥–∏—Ç–æ—Ä–∏—è')
      }
      menuButtons['üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏'] = (choose$) => {
        this.chooseSetting(choose$)
      }
      menuButtons['‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] = (choose$) => {
        this.showInformation(choose$)
      }
      $.runMenu(fast.assign({
        message: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        resizeKeyboard: true,
        layout: layout,
        'anyMatch': (choose$) => {
          choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
          .then(() => {
            this.handle(choose$, true)
          })
          .catch(console.log)
          console.log('err', choose$)
        }
      }, menuButtons))
      .catch(console.log)
    })
  }

  chooseItemInCategory($, category) {
    let menuButtons = {}

    menuButtons['‚¨ÖÔ∏è –ú–µ–Ω—é'] = (choose$) => {
      choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
      .then(() => this.handle(choose$, true))
      .catch(console.log)
    }

    seneca
    .act({
      role: 'schedule',
      cmd: 'getCategoryItems',
      category: category
    }, (err, items) => {
      if (err)
        return $.sendMessage('–£–≤—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞:\n' + err.message)
        .catch(console.log)

      fast.forEach(items, (item, ind) => {
        menuButtons[this.constructor.capsFirst(item)] = (choose$) => {
          this.chooseDayInItem(choose$, category, item)
        }
      })

      $.runMenu(fast.assign({
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–¥–ª—è –≤–≤–æ–¥–∞ —Å–∞–º–æ–º—É –Ω—É–∂–Ω–∞ –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)',
        resizeKeyboard: true,
        layout: 3,
        'anyMatch': (choose$) => {
          choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
          .then(() => this.handle(choose$, true))
          .catch(console.log)
        }
      }, menuButtons))
      .catch(console.log)
    })
  }

  chooseDayInItem($, category, item) {
    let menuButtons = {}

    menuButtons['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'] = (choose$) => {
      this.chooseItemInCategory(choose$, category)
    }

    menuButtons['‚¨ÖÔ∏è –ú–µ–Ω—é'] = (choose$) => {
      this.handle(choose$, true)
    }

    let currentDay = (new Date()).getDay()

    seneca
    .act({
      role: 'schedule',
      cmd: 'getItemDays',
      category: category,
      item: item
    }, (err, days) => {
      if (err)
        return $.sendMessage('–£–≤—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞:\n' + err.message)
        .catch(console.log)

      fast.forEach(days, (day, ind) => {
        day = parseInt(day)
        let caption = (currentDay === day) ? '>' + this.days[day] + '<' : this.days[day]
        menuButtons[caption] = (choose$) => {
          this.showDay(choose$, category, item, day.toString())
          this.chooseDayInItem(choose$, category, item)
        }
      })

      $.runMenu(fast.assign({
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
        resizeKeyboard: true,
        layout: [2, 3, 3],
        'anyMatch': (choose$) => {
          choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∑–∞–¥.')
          .then(() => this.chooseItemInCategory(choose$, category))
          .catch(console.log)
        }
      }, menuButtons))
      .catch(console.log)

    })
  }

  showDay($, category, item, day) {
    seneca
    .act({
      role: 'schedule',
      cmd: 'getDaySchedule',
      category: category,
      item: item,
      day: day
    }, (err, day) => {
      if (err)
        return $.sendMessage('–£–≤—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞:\n' + err.message)
        .catch(console.log)

      console.log(day)

      $.sendMessage(day.schedule)
      .catch(console.log)
    })
  }

  pinItem($, category) {
    let menuButtons = {
      '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': (choose$) => {
        choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
        .then(() => this.chooseSetting(choose$))
        .catch(console.log)
      },
      '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
        choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
        .then(() => this.handle(choose$, true))
        .catch(console.log)
      }
    }

    seneca
    .act({
      role: 'schedule',
      cmd: 'getCategoryItems',
      category: category
    }, (err, items) => {
      if (err)
        return $.sendMessage('–£–≤—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞:\n' + err.message)
        .catch(console.log)

      fast.forEach(items, (item, ind) => {
        menuButtons[this.constructor.capsFirst(item)] = (choose$) => {
          let pinnedItem = {
            category: category,
            item: item
          }
          choose$.setUserSession('pinnedItem', pinnedItem)
          .then(() => {

            $.getUserSession('sendingTime')
            .then(sendingTime => {
              if (!sendingTime)
                return $.sendMessage('–ú–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å. –ù–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã!')

              seneca.act({
                role:'sender',
                cmd:'subscribe',
                type:'schedule',
                chatId: $.chatId,
                sendingTime: sendingTime,
                pinnedItem: pinnedItem
              })

              return
            })

            choose$.sendMessage('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')
            this.chooseSetting(choose$)
          })
        }
      })

      $.runMenu(fast.assign({
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å',
        resizeKeyboard: true,
        layout: 3,
        'anyMatch': (choose$) => {
          choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
          .then(() => this.handle(choose$, true))
          .catch(console.log)
        }
      }, menuButtons))
      .catch(console.log)
    })
  }

  unpinItem($) {
    seneca.act({
      role:'sender',
      cmd:'unscribe',
      type:'schedule',
      chatId: $.chatId
    })
    $.setUserSession('pinnedItem', null)
    .then(() => {
      $.sendMessage('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ!')
      .then(() => this.chooseSetting($))
      .catch(console.log)
    })
  }

  chooseSetting($) {

    Promise.all([
      new Promise((resolve, reject) => {
        resolve($.getUserSession('pinnedItem'))
      }),
      new Promise((resolve, reject) => {
        resolve($.getUserSession('sendingTime'))
      })
    ])
    .then(settings => {

      let pinnedItem = settings[0]
      let sendingTime = settings[1]
      let tempText = ''

      let menuButtons = {
        '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
          this.handle(choose$, true)
        }
      }

      let pinItemMenu = {
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å',
        resizeKeyboard: true,
        layout: [2, 2, 2, 1],

        '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': (choose$) => {
          this.chooseSetting(choose$)
        },
        '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
          this.handle(choose$, true)
        },
        'üë™ –ì—Ä—É–ø–ø–∞': (choose$) => {
          this.pinItem(choose$, '–≥—Ä—É–ø–ø–∞')
        },
        'üë¥ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': (choose$) => {
          this.pinItem(choose$, '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
        },
        'üìö –ü—Ä–µ–¥–º–µ—Ç': (choose$) => {
          this.pinItem(choose$, '–ø—Ä–µ–¥–º–µ—Ç')
        },
        'üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è': (choose$) => {
          this.pinItem(choose$, '–∞—É–¥–∏—Ç–æ—Ä–∏—è')
        },
        'üëª –ù–∏—á–µ–≥–æ': (choose$) => {
          this.unpinItem(choose$)
        }
      }

      if (pinnedItem 
        /*&& this.schedule[pinnedItem.category]
        && this.schedule[pinnedItem.category][pinnedItem.item]*/) {

        tempText = 'üìç –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: ' +
              this.constructor.capsFirst(pinnedItem.category) +
              ' - ' +
              this.constructor.capsFirst(pinnedItem.item)

        menuButtons[tempText] = pinItemMenu
      } else {
        menuButtons['üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç'] = pinItemMenu
      }

      if (sendingTime) {
        tempText = 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ' + 
              this.constructor.toStringNumber(sendingTime.hour) + 
              ':' + 
              this.constructor.toStringNumber(sendingTime.minute) + 
              '. –û—Ç–∫–ª—é—á–∏—Ç—å?'
        menuButtons[tempText] = (choose$) => {
          this.disableNotifications(choose$)
        }
      }
      else {
        tempText = 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç—å?'
        menuButtons[tempText] = (choose$) => {
          this.enableNotifications(choose$)
        }
      }
  
      $.runMenu(fast.assign({
        message: '–¢—É—Ç –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø',
        resizeKeyboard: true,
        layout: [1, 1],
        'anyMatch': (choose$) => {
          choose$.sendMessage('–£–ø—Å, –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.')
          .then(() => this.handle(choose$, true))
          .catch(console.log)
        }
      }, menuButtons))
      .catch(console.log)
    }, console.log)

  }

  disableNotifications($) {
    seneca.act({
      role:'sender',
      cmd:'unscribe',
      type:'schedule',
      chatId: $.chatId
    })
    $.setUserSession('sendingTime', null)
    .then(() => {
      $.sendMessage('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!')
      this.chooseSetting($)
      return
    })
  }

  enableNotifications($) {

    let _enableNotifications = ($) => {
      let time = $.message.text
      if(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/i.test(time)) {
        time = time.split(':')
        time = {
          hour: parseInt(time[0]),
          minute: parseInt(time[1])
        }

        $.getUserSession('pinnedItem')
        .then(pinnedItem => {
          if (!pinnedItem)
            return $.sendMessage('–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.')

          seneca.act({
            role:'sender',
            cmd:'subscribe',
            type:'schedule',
            chatId: $.chatId,
            sendingTime: time,
            pinnedItem: pinnedItem
          })

          return
        })


        $.setUserSession('sendingTime', time)
        .then(() => {
          $.sendMessage('–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
          this.chooseSetting($)
          return
        })
      } else {
        $.sendMessage('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤—Ä–µ–º—è. –û—Ç–º–µ–Ω–∞.')
        this.chooseSetting($)
      }
    }

    let menuButtons = {
      '‚¨ÖÔ∏è –ù–∞–∑–∞–¥': (choose$) => {
        choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
        this.chooseSetting(choose$)
      },
      '‚¨ÖÔ∏è –ú–µ–Ω—é': (choose$) => {
        choose$.sendMessage('–û—Ç–º–µ–Ω–∞.')
        this.handle(choose$, true)
      },
      '06:30': _enableNotifications,
      '07:00': _enableNotifications,
      '07:30': _enableNotifications,
      '11:00': _enableNotifications,
      '11:30': _enableNotifications,
      '12:00': _enableNotifications
    }

    $.runMenu(fast.assign({
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM',
      resizeKeyboard: true,
      layout: [2, 3, 3],
      'anyMatch': _enableNotifications
    }, menuButtons))
    .catch(console.log)
  }

  showInformation($) {
    $.sendMessage(this.info, {
      parse_mode: 'Markdown'
    })
    .then(() => this.handle($, true))
    .catch(console.log)
  }

}

class PingController extends TelegramBaseController {

  handle($) {
    $.sendMessage('pong')
    .catch(console.log)
  }

}

class StopController extends TelegramBaseController {

  handle($) {

  }

}

const pingController = new PingController()
const stopController = new StopController()
const scheduleController = new ScheduleController()

tg.router
  .when(new TextCommand('ping'), pingController)
  .when(new TextCommand('stop'), stopController)
  .otherwise(scheduleController)